./public/classes/worker.php:44:	public function debugLogSummary() {
./public/classes/worker.php:81:	public function setAvoids($avoid_workers) {
./public/classes/worker.php:92:	public function getAvoids() {
./public/classes/worker.php:100:	public function setPrefers($prefers) {
./public/classes/worker.php:108:	public function getPrefers() {
./public/classes/worker.php:112:	public function getAllPreferences() {
./public/classes/worker.php:158:	public function getAssignedShifts() {
./public/classes/worker.php:174:	public function setRequests($requests) {
./public/classes/worker.php:202:	public function addNonResponsePrefs($dates_by_shift) {
./public/classes/worker.php:219:	public function getUsername() {
./public/classes/worker.php:228:	public function getNumShiftsOpen($job_id) {
./public/classes/worker.php:247:	public function getNumAvailableShiftsRatio($job_id) {
./public/classes/worker.php:266:	public function getDatesAssigned() {
./public/classes/worker.php:282:	public function getAdjancencyScore($date) {
./public/classes/worker.php:328:	public function getShiftsAssignedByDate($d) {
./public/classes/worker.php:354:	public function getDateScore($d, $job_id) {
./public/classes/worker.php:416:	public function wantsBundling() {
./public/classes/worker.php:429:	public function isFullyAssigned($d, $job_id) {
./public/classes/worker.php:440:	public function setAssignedShift($job_id, $date) {
./public/classes/worker.php:457:	public function hasResponded() {
./public/classes/worker.php:469:	public function printResults($only_unfilled_workers=FALSE) {
./public/classes/worker.php:509:	public function getTasks() {
./public/classes/worker.php:521:	protected function loadTasks() {
./public/classes/worker.php:563:	public function loadComments() {
./public/classes/worker.php:578:	public function getComments() {
./public/classes/worker.php:586:	public function getCommentsText() {

./public/classes/respondents.php:8:	public function __construct() {
./public/classes/respondents.php:18:	public function getWorkers() {
./public/classes/respondents.php:48:	public function getResponders() {
./public/classes/respondents.php:67:	public function getTimeRemaining() {
./public/classes/respondents.php:123:	public function getSummary($display_usernames=FALSE) {
./public/classes/respondents.php:168:	public function getNonResponders() {

./public/classes/calendar.php:36:	public function __construct($season_months=[]) {
./public/classes/calendar.php:54:	public function setSeasonMonths($season) {
./public/classes/calendar.php:58:	public function setIsReport($setting=TRUE) {
./public/classes/calendar.php:67:	public function disableWebDisplay() {
./public/classes/calendar.php:74:	public function loadAssignments($file) {
./public/classes/calendar.php:179:	public function evalDates($worker=NULL, $availability=NULL) {
./public/classes/calendar.php:470:	public function addJobsToDatesAndShifts($list_of_jobs,
./public/classes/calendar.php:485:	public function getMessage($month_num, $day_of_week, $cell) {
./public/classes/calendar.php:561:	private function getSavedPrefs($worker_id) {
./public/classes/calendar.php:597:	private function renderday($date_string, $name, $key, $saved_pref) {
./public/classes/calendar.php:667:	function getWorkerDates() {
./public/classes/calendar.php:707:	public function getWorkerComments($job_key_clause) {
./public/classes/calendar.php:717:	public function loadWorkerComments($job_key_clause) {
./public/classes/calendar.php:851:	public function getWorkerList($id, $first_entry=FALSE, $skip_user=NULL,
./public/classes/calendar.php:947:	public function getNumShifts() {
./public/classes/calendar.php:954:	public function getShiftCounts() {
./public/classes/calendar.php:984:	public function toString($worker=NULL, $availability=NULL) {
./public/classes/calendar.php:1053:	function renderSeasonDateSummary() {

./public/classes/meal.php:78:	public function addWorkerPref($username, $job_id, $pref) {
./public/classes/meal.php:130:	public function getNumPossibleWorkerRatio($job_id) {
./public/classes/meal.php:162:	public function hasOpenShifts($job_id) {
./public/classes/meal.php:204:	protected function getAvoidAndPreferWorkerList($job_id,
./public/classes/meal.php:267:	protected function pickWorker($job_id, $worker_freedom) {
./public/classes/meal.php:382:	public function fill($job_id, $worker_freedom) {
./public/classes/meal.php:461:	public function isHobarterAssignedToShift($job_id) {
./public/classes/meal.php:481:	public function getNumPlaceholders() {
./public/classes/meal.php:504:	public function printResults($format='txt') {
./public/classes/meal.php:624:	public function getAssignedWorkerNamesByJobId($job_id) {
./public/classes/meal.php:652:	public function getAssignedWorkerObjectsByJobId($job_id, $names=[]) {
./public/classes/meal.php:672:	public function getTime() {

./public/classes/WorkersList.php:15:	public function load() {
./public/classes/WorkersList.php:40:	public function getWorkers() {
./public/classes/WorkersList.php:51:	public function getWorkersListAsLinks() {

./public/classes/roster.php:25:	public function __construct() {
./public/classes/roster.php:44:	public function setShifts($season_name=NULL) {
./public/classes/roster.php:61:	public function setSchedule($schedule) {
./public/classes/roster.php:69:	public function loadRequests() {
./public/classes/roster.php:107:	public function setJobId($job_id) {
./public/classes/roster.php:121:	public function addPrefs($username, $job_id, $date, $pref=NULL) {
./public/classes/roster.php:137:	public function addNonResponderPrefs($slackers) {
./public/classes/roster.php:159:	public function sortAvailable() {
./public/classes/roster.php:192:	public function loadNumShiftsAssignedFromDatabase($username=NULL) {
./public/classes/roster.php:238:	protected function loadNumShiftsAssignedFromOverrides($username=NULL) {
./public/classes/roster.php:304:	public function getWorker($username) {
./public/classes/roster.php:320:	public function addWorker($username) {
./public/classes/roster.php:330:	public function getNonResponderNames() {
./public/classes/roster.php:341:	public function getAllAvoids() {
./public/classes/roster.php:368:	public function printResults($only_unfilled_workers=FALSE) {

./public/classes/survey.php:104:	public function loadWorkerInfo($first_name=NULL, $last_name=NULL) {
./public/classes/survey.php:125:	public function getWorkers() {
./public/classes/survey.php:144:	public function getWorkerList($id, $first_entry=FALSE, $skip_user=NULL,
./public/classes/survey.php:155:	public function getShifts() {
./public/classes/survey.php:191:	public function toString() {
./public/classes/survey.php:227:	public function reportNoShifts() {
./public/classes/survey.php:246:	protected function renderCleanAfter($requests) {
./public/classes/survey.php:318:	public function renderRequests() {
./public/classes/survey.php:389:	public function run($post) {
./public/classes/survey.php:411:	protected function setUsername($post) {
./public/classes/survey.php:423:	protected function lookupWorkerId() {
./public/classes/survey.php:442:	protected function processDates($post) {
./public/classes/survey.php:464:	protected function confirmWorkLoad() {
./public/classes/survey.php:509:	protected function getNumInstances($row) {
./public/classes/survey.php:525:	protected function saveRequests($post) {
./public/classes/survey.php:571:	protected function savePreferences() {
./public/classes/survey.php:648:	public function renderSaved() {
./public/classes/survey.php:688:	protected function sendEmail($user, $content) {

./public/globals.php:119:function get_job_ids_clause($prefix='') {
./public/globals.php:180:function is_a_hobarter($worker) {
./public/globals.php:185:function get_job_name($job_id) {
./public/globals.php:204:function is_a_group_clean_job($job_id) {

./utils/initialize_database.php:26:	public function run() {
./utils/initialize_database.php:39:	protected function removeAetherBunny() {
./utils/initialize_database.php:77:	protected function addSchedulingTables() {
./utils/initialize_database.php:92:	protected function getUsernamesFromDb() {
./utils/initialize_database.php:107:	protected function insertUserEntry($username) {
./utils/initialize_database.php:128:	protected function getUserId($username) {
./utils/initialize_database.php:152:	protected function insertAssignment($username) {
./utils/initialize_database.php:173:	protected function initializeExtraWorkers() {

./utils/database.php:14:	public function __construct() {
./utils/database.php:22:	public function test() {

./utils/check_for_conflicts.php:7:function parse_schedule_file($filename='schedule.txt') {
./utils/check_for_conflicts.php:29:function check_for_table_setter_conflicts($filename) {

./utils/add_non_go_workers.php:25:	public function __construct($workers) {
./utils/add_non_go_workers.php:33:	public function run() {
./utils/add_non_go_workers.php:52:	protected function loadUserIds() {
./utils/add_non_go_workers.php:76:	protected function loadMaxAssignmentId() {
./utils/add_non_go_workers.php:95:	protected function addWorkers($overrides) {

./utils/find_current_season_jobs.php:18:	public function __construct() {
./utils/find_current_season_jobs.php:26:	public function run() {

./auto_assignments/schedule.php:50:	public function getWorker($username) {
./auto_assignments/schedule.php:58:	public function getMeals() {
./auto_assignments/schedule.php:101:	public function setRoster($r) {
./auto_assignments/schedule.php:146:	public function getDatesByShift() {
./auto_assignments/schedule.php:187:	public function addNonResponderPrefs($slackers) {
./auto_assignments/schedule.php:219:	public function isFinished() {
./auto_assignments/schedule.php:232:	public function sortPossibleRatios() {
./auto_assignments/schedule.php:292:	public function fillMeal($worker_freedom) {
./auto_assignments/schedule.php:337:	public function getNumPlaceholders() {
./auto_assignments/schedule.php:351:	public function getResults($format='txt' ) {
./auto_assignments/schedule.php:363:	public function printResults($format='txt' ) {
./auto_assignments/schedule.php:383:	public function getColumnOrder() {
./auto_assignments/schedule.php:402:	public function getTabbedHeaders() {
./auto_assignments/schedule.php:411:	public function getNumMeals() {
./auto_assignments/schedule.php:427:	public function getAssigned() {

./auto_assignments/levels_check.php:38:	public function __construct($a=NULL, $b=NULL, $c=NULL) {
./auto_assignments/levels_check.php:50:	public function run() {
./auto_assignments/levels_check.php:69:	public function loadPrefs() {
./auto_assignments/levels_check.php:110:	public function initNonResponerPrefs() {
./auto_assignments/levels_check.php:122:	public function makeAssignments() {
./auto_assignments/levels_check.php:142:	public function saveResults() {
./auto_assignments/levels_check.php:152:	public function getNumPlaceholders() {
./auto_assignments/levels_check.php:160:	public function printResults($options) {
./auto_assignments/levels_check.php:177:	public function outputSqlInserts() {
./auto_assignments/levels_check.php:185:	public function outputCSV() {

./auto_assignments/assignments.php:32:	public function initialize($season_months=[]) {
./auto_assignments/assignments.php:43:	public function run() {
./auto_assignments/assignments.php:58:	public function loadPrefs() {
./auto_assignments/assignments.php:99:	public function initNonResponerPrefs() {
./auto_assignments/assignments.php:111:	public function makeAssignments() {
./auto_assignments/assignments.php:131:	public function saveResults() {
./auto_assignments/assignments.php:141:	public function getNumPlaceholders() {
./auto_assignments/assignments.php:147:	public function getResults() {
./auto_assignments/assignments.php:156:	public function printSchedule($options) {
./auto_assignments/assignments.php:163:	public function printWorkers($options) {
./auto_assignments/assignments.php:172:	public function outputSqlInserts() {
./auto_assignments/assignments.php:180:	public function outputCSV() {

./public/js/survey_library.js:6:function select_day(dow, choice) {

./public/index.php:74:function display_respondents() {
./public/index.php:87:function display_worker_menu() {
./public/index.php:107:function build_survey($workers, $survey, $get_w) {
