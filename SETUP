The Great Oak Meals Scheduling Survey
----------------------------------------
Directions to set up the survey:

# make sure that unit tests work:
	cd tests
	./run.sh
	cd ..

# check that there aren't uncommitted modifications
	cd /home/gocoho/meals_scheduling_dev/
	git status

# edit ~/meals_scheduling_dev/public/season.php
	- set the appropriate DEADLINE date
	- set the SUB_SEASON_FACTOR
	- add any extra workers to the get_num_shift_overrides() function

# --------------------
# MID-SEASON:
# if this is mid-season, follow these directions, then skip to the next
# --------------------

# clear out existing tables
	cd public/sqlite_data/
	sqlite3 work_allocation.db
	sqlite> .read reset_mid_season.sql
	// exit sqlite
	cd ../
	git diff | view -

# You may need to adjust the season's months:
	edit public/season.php
	maybe change the SEASON_NAME?
	examine get_current_season_months()
	update the get_num_shift_overrides for the current sub-season

# verify and commmit
	run unit tests & fix if needed
	git commit

# skip to FINISH-START-OF-SEASON


# --------------------
# SEASON-START:
# --------------------
# grab the latest sqlite file from work hosting, fix permissions, and commit:
	# login to the work web UI, go to more reports, and "Download SQLite3 database from host"
	# locally...
	open http://gocoho.tklapp.com/download/database/
	# download the latest sqlite file
	cd ~/Downloads/
	unzip filedb.zip
	scp -P 1022 home/django/work/db.sqlite3 gocoho@gocoho.org:meals_scheduling_dev/public/sqlite_data/
	rm -rf home/

	# on the remote host...
	cd meals_scheduling_dev/public/sqlite_data
	mv db.sqlite3 work_allocation.db
	chmod 644 work_allocation.db
	sqlite work_allocation.db
	# view the current state of tables
	sqlite> .tables
	# drop a bunch of tables
	sqlite> .read drops.sql
	# confirm
	sqlite> .tables
		# there should be 4 tables:
		# auth_user, work_app_job, work_app_assignment, work_app_season
	git add !$
	git commit !$

# get new job IDs for the season, and update the defines for each job in config.php
	cd ../../utils/
	php find_current_season_jobs.php
	# copy that block and replace the previous season's entries in this file:
	vi ../public/season.php

# initialize the database
	php initialize_database.php
	cd ..
	cd tests/
	./run.sh
	# if all unit tests pass, then commit
	git status
	git add *
	git commit


# --------------------
# FINISH-START-OF-SEASON
# --------------------
#
# stage everything from the meals dev repo to public_html
	cd ~/meals_scheduling_dev/
	- remove any previous dates from public/season.php
		* get_regular_day_overrides()
		* get_skip_dates()
	- confirm whether we want to display a farm meals night message...
	git status
	# commit changes

	cd ~
	#!# careful! - this will blank out any collected data...
	rsync -avz meals_scheduling_dev/public/ public_html/meals_scheduling/

# test to make sure everything works, view in web browser
	- confirm that the calendar dates are correct
	- confirm the holidays and meeting nights are correct
	- fill in some entries and save them, then revert
	#!# careful! - this will blank out any collected data...
	rsync -avz meals_scheduling_dev/public/ public_html/meals_scheduling/
	- load listing page again to make sure that the database is writeable

# notify participants that the survey is ready

# set up database backup routine on the webserver:
	mkdir ~/backups
	chmod 700 ~/backups/

	crontab -e
	# uncomment the following lines:
	20 *   *   *   *   /bin/cp -f ~/meals_scheduling_dev/public/sqlite_data/work_allocation.db ~/backups/
	50 5 * * * /bin/cp -f public_html/meals_scheduling/sqlite_data/work_allocation.db ~/backups/work_allocation.db_daily

- schedule a few reminders spaced out over the rest of the session to send
  reminder emails to laggards

# --------------------
# END-OF-SURVEY
# --------------------

- disable cronjobs

- commit closed database:
	cd meals_scheduling_dev/public/sqlite_data/
	cp ~/public_html/meals_scheduling/sqlite_data/work_allocation.db .
	git status
	git commit work_allocation.db

- check for any un-assigned workers
	cd ~/meals_scheduling_dev/auto_assignments/
	php execute.php -u

- If we know that we need to cancel 1 or more meals, now would be a good
   time to run... set DEBUG_GET_LEAST_POSSIBLE to TRUE, then run this command:
	tail -f error
	php execute.php -s
	# look at all of the shifts to see where the pain lies... head, asst, cleaner
	# if we need to cancel meals, then fill in get_skip_dates()

- count un-filled slots:
	php execute.php -s > results.txt
	grep XXX !$

- if some meals need to be cancelled, this would be a good time to look for
  the hardest to fill days:
	grep 'XXXXXXXX.*XXXXXXXX' results.txt

- check for hobarter ratio:
	grep HOBART results.txt

- Examine workers:
	php execute.php -w > workers.txt

- Someone may have volunteered to take too many additional meals.
  Reduce the number of needed volunteer / override positions mentioned
  with this:
	grep OVERAGE workers.txt

- find the people who aren't fully assigned:
	egrep '(^name|\(0)' workers.txt | grep -B1 'j:' > workers_not_full.txt

- download a copy of the schedule, and upload it to google drive
	# on localhost
	cd ~/Desktop/
	scp -i ~/.ssh/id_dsa -P 1022 \
		gocoho@gocoho.org:/home/gocoho/meals_scheduling_dev/auto_assignments/results.txt .

- try to move the under-assigned workers to fill the 'XXX' spots, making trades

- do any swapping needed

- copy and paste from "Confirm results check" section, and create custom ones for anything
  that's not a personal avoid request.
	1) Export from google spreadsheet, download as tab-delimited
		* rename file to schedule.txt
	2) go to http://gocoho.org/meals_scheduling/report.php?key=all#confirm_checks
		* copy section of text
		* vi checks.sh
		* paste
		* chmod +x checks.sh
		* ./checks.sh | more

- read the comments and make sure they apply cleanly with auto-checks

- check to make sure that there are no 'table setter' assignments which conflict
  with head or asst cooking
	* Export from google spreadsheet, download as tab-delimited
	* see tests/CheckForConflictsTest.php
	* #!# need a test to ensure that nobody is double-scheduled... like head & asst or table setter

- run avoids validation:
	# is this needed with the new unit tests?
	cd ../utils/
	php validate_schedule.php -f ../tests/data/schedule.tsv

- upload any changes to google sheets and announce it



translate dale's work system user names to MESS inserts
--------------------------------------------------------
- go to phpPgAdmin
	* https://web471.webfaction.com/phpPgAdmin/
	* servers
	* postgres
	* login
	* mess_production
	* public
	* users / Select action
		- id, first, last, alternate_id,
		- Select button
	* Download
	* Format: CSV and Download
	* scp -P 7822 ~/Downloads/dump.csv username@hostname:

- rename:
	* cat dump.csv | grep -v '"\\N"' > meals_scheduling_dev/public/results/go_user_ids.csv
	* rm dump.csv

- extract just the alternate IDs:
	* cd meals_scheduling_dev/public/results/
	* cat go_user_ids.csv | cut -d\, -f4 | cut -d\" -f2 | sort -u > go_mess_names.txt

- extract the scheduled names:
	* cd public/
	* sqlite3 sqlite_data/work_allocation.db "select username from auth_user order by username" > results/auth_users.txt

- look for any missing, and yet current workers:
	* diff go_mess_names.txt auth_users.txt | grep '>' > missing_from_mess.txt

#!#

#!# need to get them entered into the new system...



#!# need to inspect the names list first...

- generate the ruby inserts:
	* php meals_inserts.php > mess_schedule_inserts.rb



- ?? profit!





Development notes between seasons
------------------------------------

# update public/config.php, update the season name, year, and season id

- pop into sqlite:
	sqlite3 !$

- update the data to use the current season id:
	update work_app_assignment set season_id=11 where season_id=10;

# create some entries (cook & clean) for testing of survey
# sqlite> insert into work_app_assignment values(NULL, 'a', 3, 4592, 1, 33, 59);
# sqlite> insert into work_app_assignment values(NULL, 'a', 1, 4596, 1, 33, 59);


How to add a user with an override.
-------------------------------------
They need to be entered into the database...

% sqlite3 work_allocation.db

# get the username of the peron
sqlite> select id from auth_user where username='XXX';
164

# get the max assignment id:
sqlite> select max(id) from work_app_assignment;
9254

# add a new entry
insert into work_app_assignment values(
        "id", -- max assignment id + 1
        "type", 
        "instances",
        "job_id",
        "reason_id",
        "season_id",
        "worker_id"
);
insert into work_app_assignment values(13623, '', 1, 4594, 0, 33, 164);


