The Great Oak Meals Scheduling Survey
----------------------------------------
Directions to set up the survey:

# make sure that unit tests work:
	cd tests
	./run.sh
	cd ..

# check that there aren't uncommitted modifications in either version:
	cd /home/gocoho/meals_scheduling/
	git status

# Look for differences between work repo and production
	cd ~
	diff -r meals_scheduling/public/ public_html/meals_scheduling/

# if changes are needed...
	cd ~/public_html/meals_scheduling/
	for i in `find . -type f`; do cp ~/meals_scheduling/public/$i $i; done

# edit ~/meals_scheduling/public/config.php
	- set the appropriate DEADLINE date

# edit public/utils.php
	- confirm the holiday dates (get_holidays) function is correct for
	  the upcoming season 

# edit public/config.php
	# add any extra workers to the get_num_shift_overrides() function

# grab the latest sqlite file from work hosting, fix permissions, and commit:
	# login to the work web UI, go to more reports, and "Download SQLite3 database from host"
	# locally...
	cd ~/Downloads/
	unzip filedb.zip
	scp -P 1022 home/django/work/db.sqlite3 gocoho@gocoho.org:meals_scheduling/public/sqlite_data/work_allocation.db

	# on the remote host...
	cd meals_scheduling/public/sqlite_data
	chmod 644 work_allocation.db
	# sudo chgrp gocoho !$
	git add !$
	git commit !$

# get new job IDs for the season, and update the defines for each job in config.php
	cd ../../utils/
	php find_current_season_jobs.php
	# copy that block and replace the previous season's entries in this file:
	vi ../public/config.php

# initialize the database
	php initialize_database.php
	cd ..
	git status
	git add *
	git commit

# stage everything from the meals dev repo to public_html
	cd ~/public_html/meals_scheduling/
	for i in `find . -type f`; do cp ~/meals_scheduling/public/$i $i; done

# test to make sure everything works
	- confirm that the calendar dates are correct
	- remove any previous dates from config.php / get_regular_day_overrides()
	- confirm the holidays and meeting nights are correct
	- confirm whether we want to display a farm meals night message...
	- fill in some entries and save them, then revert
		* git checkout sqlite_data/work_allocation.db
	- load listing page again to make sure that the database is writeable

# notify participants that the survey is ready
 
# commit the current state
  	- git status
  	- git add *
  	- git commit

# set up database backup routine on the webserver:
	mkdir ~/backups
	chmod 700 ~/backups/
	# sudo bash
	crontab -e
	# uncomment the following lines:
	20 *   *   *   *   /bin/cp -f ~/meals_scheduling/public/sqlite_data/work_allocation.db ~/backups/

- schedule a few reminders spaced out over the rest of the session to send
  reminder emails to laggards

what to do at the end of the survey:
-------------------------------------
- disable cronjobs

- commit closed database:
	git status
	git add # files which changed
	git commit

- check for any changes to the codebase and optionally make commits
	$ cd public_html/meals_scheduling
	$ for i in `find -type f`; do diff $i ~/meals_scheduling/public/$i; done

- check for any un-assigned workers
	cd ~/meals_scheduling/auto_assignments/
	php execute.php -u

- count un-filled slots:
	php execute.php -s > results.txt
	grep XXX !$

- check for hobarter ratio:
	grep HOBART results.txt

- Examine workers:
	php execute.php -w > workers.txt

- Someone may have volunteered to take too many additional dinners.
  Reduce the number of needed volunteer / override positions mentioned
  with this:
	grep OVERAGE workers.txt

- find the people who aren't fully assigned:
	egrep '(^name|\(0)' workers.txt | grep -B1 'j:' > workers_not_full.txt

- make trades to get the under-assigned people swapped in replacing XXXXs

- read the comments and make sure they apply cleanly with auto-checks

- copy and paste from "Confirm results check" section, and create custom ones for anything
  that's not a personal avoid request.
	http://gocoho.org/meals_scheduling/report.php?key=all#confirm_checks
	* copy section
	* vi checks.sh
	* paste
	* chmod +x checks.sh
	* ./checks.sh

- check to make sure that there are no 'table setter' assignments which conflict
  with head or asst cooking
	* see tests/CheckForConflictsTest.php

- do any swapping needed

- run avoids validation:
	cd ../utils/
	php validate_schedule.php -f ../auto_assignments/results.txt

translate dale's work system user names to MESS inserts
--------------------------------------------------------
- go to phpPgAdmin
	* https://web471.webfaction.com/phpPgAdmin/
	* servers
	* postgres
	* login
	* mess_production
	* public
	* users / Select action
		- id, first, last, alternate_id,
		- Select button
	* Download
	* Format: CSV and Download
	* scp -P 7822 ~/Downloads/dump.csv username@hostname:

- rename:
	* cat dump.csv | grep -v '"\\N"' > meals_scheduling/public/results/go_user_ids.csv
	* rm dump.csv

- extract just the alternate IDs:
	* cd meals_scheduling/public/results/
	* cat go_user_ids.csv | cut -d\, -f4 | cut -d\" -f2 | sort -u > go_mess_names.txt

- extract the scheduled names:
	* cd public/
	* sqlite3 sqlite_data/work_allocation.db "select username from auth_user order by username" > results/auth_users.txt

- look for any missing, and yet current workers:
	* diff go_mess_names.txt auth_users.txt | grep '>' > missing_from_mess.txt

#!#

#!# need to get them entered into the new system...



#!# need to inspect the names list first...

- generate the ruby inserts:
	* php meals_inserts.php > mess_schedule_inserts.rb



- ?? profit!





Development notes between seasons
------------------------------------

# update public/config.php, update the season name, year, and season id

- pop into sqlite:
	sqlite3 !$

- update the data to use the current season id:
	update work_app_assignment set season_id=11 where season_id=10;


How to add a user with an override.
-------------------------------------
They need to be entered into the database...

% sqlite3 work_allocation.db

# get the username of the peron
sqlite> select id from auth_user where username='katie';
35

# get the max assignment id:
sqlite> select max(id) from work_app_assignment;
9254

# add a new entry
insert into work_app_assignment values(9255, 23, 'a', 35, 2715, 0, 1);
insert into work_app_assignment values(max assignment + 1, season id, 'a',
	username, job id, 0, 1);

